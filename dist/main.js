/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Constants (URLs)\r\nconst base_url = 'http://127.0.0.1:8082/src/data/';\r\nconst lifetime_rankings_url = base_url + 'lifetime_rankings.json';\r\nconst lifetime_sets_url = base_url + 'lifetime_sets.json';\r\nconst lifetime_games_url = base_url + 'lifetime_games.json';\r\nconst seasonal_rankings_url = base_url + 'seasonal_rankings.json';\r\nconst seasonal_sets_url = base_url + 'seasonal_sets.json';\r\nconst seasonal_games_url = base_url + 'seasonal_games.json';\r\n\r\n// Constants (elements)\r\nconst player_selection_submit = document.getElementById('player-selection__submit');\r\nconst player_one_select = document.getElementById('player_one');\r\nconst player_two_select = document.getElementById('player_two');\r\nconst data_output = document.getElementById('data_output');\r\nconst progress_log = document.getElementById('progress-log');\r\nconst error_messages_element = document.getElementById('error_messages');\r\n\r\n// Constants (other)\r\nconst tag_separator = ' | ';\r\nconst player_one_default = 'Player One';\r\nconst player_two_default = 'Player Two';\r\nconst default_tag = 'Y-Town Smash';\r\nconst bracket_social = 'https://start.gg/yts';\r\nconst character_delimiter = ' - ';\r\nconst character_prefix = './public/images/fighters/';\r\nconst character_suffix = '-00-full.png';\r\nconst score_delimiter = ' -- ';\r\nconst debug_mode = true;\r\n\r\nasync function get_data() {\r\n\r\n    try {\r\n        \r\n        writeLog('Attempting to pull data...');\r\n        \r\n        // Attempt to pull data.\r\n        const lifetime_rankings_response = await fetch(lifetime_rankings_url);\r\n        const lifetime_sets_response = await fetch(lifetime_sets_url);\r\n        const lifetime_games_response = await fetch(lifetime_games_url);\r\n        const seasonal_rankings_response = await fetch(seasonal_rankings_url);\r\n        const seasonal_sets_response = await fetch(seasonal_sets_url);\r\n        const seasonal_games_response = await fetch(seasonal_games_url);\r\n\r\n        // Failure to get a response.\r\n        if (!lifetime_rankings_response.ok) {throw new Error(`She's broke bahd! Response status: ${lifetime_rankings_response.status}`); }\r\n        if (!lifetime_sets_response.ok) {throw new Error(`She's broke bahd! Response status: ${lifetime_sets_response.status}`); }\r\n        if (!lifetime_games_response.ok) {throw new Error(`She's broke bahd! Response status: ${lifetime_games_response.status}`); }\r\n        if (!seasonal_rankings_response.ok) {throw new Error(`She's broke bahd! Response status: ${seasonal_rankings_response.status}`); }\r\n        if (!seasonal_sets_response.ok) {throw new Error(`She's broke bahd! Response status: ${seasonal_sets_response.status}`); }\r\n        if (!seasonal_games_response.ok) {throw new Error(`She's broke bahd! Response status: ${seasonal_games_response.status}`); }\r\n\r\n        writeLog('Responses OK, pulling data...');\r\n\r\n        // Response is good, wait for data to pull.\r\n        const lifetime_rankings_response_json = await lifetime_rankings_response.json();\r\n        const lifetime_sets_response_json = await lifetime_sets_response.json();\r\n        const lifetime_games_response_json = await lifetime_games_response.json();\r\n        const seasonal_rankings_response_json = await seasonal_rankings_response.json();\r\n        const seasonal_sets_response_json = await seasonal_sets_response.json();\r\n        const seasonal_games_response_json = await seasonal_games_response.json();\r\n\r\n        writeLog('Creating Head 2 Head JSON: Building Player structure...');\r\n        \r\n        // Initialize an object to organize all of the data.\r\n        let head_2_head = {};\r\n\r\n        // Lifetime Rankings.\r\n        for (const player in lifetime_rankings_response_json) {\r\n\r\n            let current_player = lifetime_rankings_response_json[player].Player;\r\n            let current_player_tag = '';\r\n\r\n            if (current_player.includes(tag_separator)) {\r\n\r\n                let current_player_data = current_player.split(tag_separator);\r\n\r\n                current_player = current_player_data[1];\r\n                current_player_tag = current_player_data[0];\r\n            }\r\n\r\n            head_2_head[current_player] = {\r\n\r\n                'Characters': lifetime_rankings_response_json[player].Characters,\r\n                'Country': lifetime_rankings_response_json[player].Country,\r\n                'GameData': {\r\n                    'Lifetime': {},\r\n                    'Seasonal': {}\r\n                },\r\n                'PlayerName': current_player,\r\n                'PowerRanking': {\r\n                    'Lifetime': {\r\n                        'Points': lifetime_rankings_response_json[player].Points,\r\n                        'Rank': lifetime_rankings_response_json[player].Rank\r\n                    },\r\n                    'Seasonal': {\r\n                        'Points': '',\r\n                        'Rank': ''\r\n                    }\r\n                },\r\n                'Tag': current_player_tag,\r\n                'SetData': {\r\n                    'Lifetime': {},\r\n                    'Seasonal': {}\r\n                }\r\n            \r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Creating Head 2 Head JSON: Seasonal Rankings...');\r\n\r\n        // Seasonal Rankings.\r\n        for (const player in seasonal_rankings_response_json) {\r\n\r\n            let current_player = seasonal_rankings_response_json[player].Player;\r\n            let current_player_points = seasonal_rankings_response_json[player].Points;\r\n            let current_player_rank = seasonal_rankings_response_json[player].Rank;\r\n            current_player = cleanPlayerName(current_player);\r\n\r\n            head_2_head[current_player].PowerRanking.Seasonal.Points = current_player_points;\r\n            head_2_head[current_player].PowerRanking.Seasonal.Rank = current_player_rank;\r\n\r\n        }\r\n\r\n        writeLog('Data cleaning: Deleteing header arrays...');\r\n        \r\n        // Store the headers from the Set and Game data.\r\n        const lifetime_sets_headers = lifetime_sets_response_json[0];\r\n        const lifetime_games_headers = lifetime_games_response_json[0];\r\n        const seasonal_sets_headers = seasonal_sets_response_json[0];\r\n        const seasonal_games_headers = seasonal_games_response_json[0];\r\n\r\n        // Delete the headers from the original objects.\r\n        delete lifetime_sets_response_json[0];\r\n        delete lifetime_games_response_json[0];\r\n        delete seasonal_sets_response_json[0];\r\n        delete seasonal_games_response_json[0];\r\n\r\n        writeLog('Data cleaning: Lifetime Sets...');\r\n\r\n        // Replace the keys in the Set and Game data to be the Player Name.\r\n        for (const player in lifetime_sets_response_json) {\r\n\r\n            let player_name = lifetime_sets_response_json[player][\"field2\"];\r\n\r\n            if (player_name == undefined) {\r\n                continue;\r\n            }\r\n\r\n            player_name = cleanPlayerName(player_name);\r\n            lifetime_sets_response_json[player_name] = lifetime_sets_response_json[player];\r\n            delete lifetime_sets_response_json[player];\r\n\r\n        }\r\n\r\n        writeLog('Data cleaning: Lifetime Games...');\r\n\r\n        for (const player in lifetime_games_response_json) {\r\n\r\n            let player_name = lifetime_games_response_json[player][\"field2\"];\r\n            \r\n            if (player_name == undefined) {\r\n                continue;\r\n            }\r\n            \r\n            player_name = cleanPlayerName(player_name);\r\n            lifetime_games_response_json[player_name] = lifetime_games_response_json[player];\r\n            delete lifetime_games_response_json[player];\r\n\r\n        }\r\n\r\n        writeLog('Data cleaning: Seasonal Sets...');\r\n\r\n        for (const player in seasonal_sets_response_json) {\r\n\r\n            let player_name = seasonal_sets_response_json[player][\"field2\"];\r\n            \r\n            if (player_name == undefined) {\r\n                continue;\r\n            }\r\n            \r\n            player_name = cleanPlayerName(player_name);\r\n            seasonal_sets_response_json[player_name] = seasonal_sets_response_json[player];\r\n            delete seasonal_sets_response_json[player];\r\n\r\n        }\r\n\r\n        writeLog('Data cleaning: Seasonal Games...');\r\n\r\n        for (const player in seasonal_games_response_json) {\r\n\r\n            let player_name = seasonal_games_response_json[player][\"field2\"];\r\n            \r\n            if (player_name == undefined) {\r\n                continue;\r\n            }\r\n            \r\n            player_name = cleanPlayerName(player_name);\r\n            seasonal_games_response_json[player_name] = seasonal_games_response_json[player];\r\n            delete seasonal_games_response_json[player];\r\n\r\n        }\r\n\r\n        writeLog('Data cleaning: Key replacements for Lifetime Sets...');\r\n\r\n        // Replace the keys for Set and Game results with the Player Name.\r\n        for (const player in lifetime_sets_response_json) {\r\n\r\n            for (const result in lifetime_sets_response_json[player]) {\r\n\r\n                let current_result = lifetime_sets_response_json[player][result];\r\n                let current_result_opponent = lifetime_sets_headers[result];\r\n\r\n                current_result_opponent = cleanPlayerName(current_result_opponent);\r\n\r\n                lifetime_sets_response_json[player][current_result_opponent] = current_result;\r\n                delete lifetime_sets_response_json[player][result];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Data cleaning: Key replacements for Lifetime Games...');\r\n\r\n        for (const player in lifetime_games_response_json) {\r\n\r\n            for (const result in lifetime_games_response_json[player]) {\r\n\r\n                let current_result = lifetime_games_response_json[player][result];\r\n                let current_result_opponent = lifetime_games_headers[result];\r\n\r\n                current_result_opponent = cleanPlayerName(current_result_opponent);\r\n                \r\n                lifetime_games_response_json[player][current_result_opponent] = current_result;\r\n                delete lifetime_games_response_json[player][result];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Data cleaning: Key replacements for Seasonal Sets...');\r\n\r\n        for (const player in seasonal_sets_response_json) {\r\n            \r\n            for (const result in seasonal_sets_response_json[player]) {\r\n\r\n                let current_result = seasonal_sets_response_json[player][result];\r\n                let current_result_opponent = seasonal_sets_headers[result];\r\n\r\n                current_result_opponent = cleanPlayerName(current_result_opponent);\r\n                \r\n                seasonal_sets_response_json[player][current_result_opponent] = current_result;\r\n                delete seasonal_sets_response_json[player][result];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Data cleaning: Key replacements for Seasonal Games...');\r\n\r\n        for (const player in seasonal_games_response_json) {\r\n\r\n            for (const result in seasonal_games_response_json[player]) {\r\n\r\n                let current_result = seasonal_games_response_json[player][result];\r\n                let current_result_opponent = seasonal_games_headers[result];\r\n\r\n                current_result_opponent = cleanPlayerName(current_result_opponent);\r\n             \r\n                seasonal_games_response_json[player][current_result_opponent] = current_result;\r\n                delete seasonal_games_response_json[player][result];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Creating Head 2 Head JSON: Adding Lifetime Sets data...');\r\n\r\n        // Lifetime Sets.\r\n        for (const player in lifetime_sets_response_json) {\r\n\r\n            if (player == 0) {\r\n                delete lifetime_sets_response_json[player];\r\n            } else {\r\n\r\n                deleteExtraFields(lifetime_sets_response_json, player);\r\n\r\n                head_2_head[player]['SetData']['Lifetime'] = lifetime_sets_response_json[player];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Creating Head 2 Head JSON: Adding Seasonal Set data...');\r\n\r\n        // Seasonal Sets.\r\n        for (const player in seasonal_sets_response_json) {\r\n            \r\n            if (player == 0) {\r\n                delete seasonal_sets_response_json[player];\r\n            } else {\r\n\r\n                deleteExtraFields(seasonal_sets_response_json, player);\r\n\r\n                head_2_head[player]['SetData']['Seasonal'] = seasonal_sets_response_json[player];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Creating Head 2 Head JSON: Adding Lifetime Game data...');\r\n\r\n        // Lifetime Games.\r\n        for (const player in lifetime_games_response_json) {\r\n            \r\n            if (player == 0) {\r\n                delete lifetime_games_response_json[player];\r\n            } else {\r\n\r\n                deleteExtraFields(lifetime_games_response_json, player);\r\n\r\n                head_2_head[player]['GameData']['Lifetime'] = lifetime_games_response_json[player];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Creating Head 2 Head JSON: Adding Seasonal Game data...');\r\n\r\n        // Seasonal Games.\r\n        for (const player in seasonal_games_response_json) {\r\n            \r\n            if (player == 0) {\r\n                delete seasonal_games_response_json[player];\r\n            } else {\r\n\r\n                deleteExtraFields(seasonal_games_response_json, player);\r\n\r\n                head_2_head[player]['GameData']['Seasonal'] = seasonal_games_response_json[player];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        writeLog('Head 2 Head JSON compiled, creating list of Players...');\r\n\r\n        // Insert placeholder option elements.\r\n        player_one_select.innerHTML += `<option>${player_one_default}</option>`;\r\n        player_two_select.innerHTML += `<option>${player_two_default}</option>`;\r\n\r\n        // Create option elements for each player from the fact sheet.\r\n        for (const player in head_2_head) {\r\n\r\n            let current_player = head_2_head[player].PlayerName;\r\n            let current_player_rank = head_2_head[player].Rank;\r\n\r\n            player_one_select.innerHTML += `<option value=\"${current_player_rank}\">${current_player}</option>`;\r\n            player_two_select.innerHTML += `<option value=\"${current_player_rank}\">${current_player}</option>`;\r\n                \r\n        }\r\n\r\n        writeLog('Finishing up...');\r\n\r\n        // Wait for the user to click Submit.\r\n        player_selection_submit.addEventListener('click', function() {\r\n\r\n            if (bothPlayersSelected(player_one_select, player_two_select, error_messages_element)) {\r\n\r\n                // Scroll down to hide the player selection elements.\r\n                window.scrollTo({\r\n                    top: document.body.scrollHeight, left: 0, behavior: \"smooth\"\r\n                });\r\n\r\n\r\n                // Retrieve the Player Names from the select elements.\r\n                let player_one_name = player_one_select.options[player_one_select.selectedIndex].innerText;\r\n                let player_two_name = player_two_select.options[player_two_select.selectedIndex].innerText;\r\n\r\n                // Player One and Two Tags.\r\n                let player_one_tag = head_2_head[player_one_name].Tag;\r\n                let player_two_tag = head_2_head[player_two_name].Tag;\r\n\r\n                // Player One Characters.\r\n                let player_one_characters = head_2_head[player_one_name].Characters.split(character_delimiter);\r\n                let player_one_main = character_prefix + player_one_characters[0] + character_suffix;\r\n                let player_one_secondary = character_prefix + player_one_characters[1] + character_suffix;\r\n\r\n                // Player Two Characters\r\n                let player_two_characters = head_2_head[player_two_name].Characters.split(character_delimiter);\r\n                let player_two_main = character_prefix + player_two_characters[0] + character_suffix;\r\n                let player_two_secondary = character_prefix + player_two_characters[1] + character_suffix;\r\n\r\n                // Player One Power Rankings.\r\n                let player_one_seasonal_rank = head_2_head[player_one_name].PowerRanking.Seasonal.Rank;\r\n                let player_one_seasonal_points = head_2_head[player_one_name].PowerRanking.Seasonal.Points;\r\n\r\n                // Player Two Power Rankings.\r\n                let player_two_seasonal_rank = head_2_head[player_two_name].PowerRanking.Seasonal.Rank;\r\n                let player_two_seasonal_points = head_2_head[player_two_name].PowerRanking.Seasonal.Points;\r\n\r\n                // Player One Set/Game Data.\r\n                let player_one_seasonal_sets = head_2_head[player_one_name].SetData.Seasonal[player_two_name];\r\n                let player_one_seasonal_games = head_2_head[player_one_name].GameData.Seasonal[player_two_name];\r\n                \r\n                let player_one_lifetime_sets = head_2_head[player_one_name].SetData.Lifetime[player_two_name];\r\n                let player_one_lifetime_games = head_2_head[player_one_name].GameData.Lifetime[player_two_name];\r\n\r\n                if (\r\n                    player_one_seasonal_sets != undefined &&\r\n                    player_one_seasonal_sets != '0 -- 0'\r\n                ) {\r\n\r\n                    // Cleaning of Set/Game ratios/scores.\r\n                    let player_one_seasonal_sets_array = player_one_seasonal_sets.split(score_delimiter);\r\n                    let player_one_seasonal_games_array = player_one_seasonal_games.split(score_delimiter);\r\n\r\n                    let player_one_lifetime_sets_array = player_one_lifetime_sets.split(score_delimiter);\r\n                    let player_one_lifetime_games_array = player_one_lifetime_games.split(score_delimiter);\r\n\r\n                    let player_one_lifetime_set_count = player_one_lifetime_sets_array[0];\r\n                    let player_one_lifetime_game_count = player_one_lifetime_games_array[0];\r\n                    let player_one_seasonal_set_count = player_one_seasonal_sets_array[0];\r\n                    let player_one_seasonal_game_count = player_one_seasonal_games_array[0];\r\n\r\n                    let player_two_lifetime_set_count= player_one_lifetime_sets_array[1];\r\n                    let player_two_lifetime_game_count= player_one_lifetime_games_array[1];\r\n                    let player_two_seasonal_set_count= player_one_seasonal_sets_array[1];\r\n                    let player_two_seasonal_game_count= player_one_seasonal_games_array[1];\r\n\r\n                    let player_one_seasonal_set_score = parseInt(player_one_seasonal_sets_array[0]);\r\n                    let player_two_seasonal_set_score = parseInt(player_one_seasonal_sets_array[1]);\r\n\r\n                    let player_one_seasonal_game_score = parseInt(player_one_seasonal_games_array[0]);\r\n                    let player_two_seasonal_game_score = parseInt(player_one_seasonal_games_array[1]);\r\n\r\n                    let player_one_seasonal_set_ratio = Math.round(player_one_seasonal_set_score /(player_one_seasonal_set_score + player_two_seasonal_set_score) * 100);\r\n                    let player_one_seasonal_game_ratio = Math.round(player_one_seasonal_game_score /(player_one_seasonal_game_score + player_two_seasonal_game_score) * 100);\r\n                    \r\n                    let player_one_lifetime_set_score = parseInt(player_one_lifetime_sets_array[0]);\r\n                    let player_two_lifetime_set_score = parseInt(player_one_lifetime_sets_array[1]);\r\n\r\n                    let player_one_lifetime_game_score = parseInt(player_one_lifetime_games_array[0]);\r\n                    let player_two_lifetime_game_score = parseInt(player_one_lifetime_games_array[1]);\r\n\r\n                    let player_one_lifetime_set_ratio = Math.round(player_one_lifetime_set_score /(player_one_lifetime_set_score + player_two_lifetime_set_score) * 100);\r\n                    let player_one_lifetime_game_ratio = Math.round(player_one_lifetime_game_score /(player_one_lifetime_game_score + player_two_lifetime_game_score) * 100);\r\n\r\n                    // Inversion of Set/Game ratios for Player Two.\r\n                    let player_two_seasonal_set_ratio = 100 - player_one_seasonal_set_ratio;\r\n                    let player_two_seasonal_game_ratio = 100 - player_one_seasonal_game_ratio;\r\n                    let player_two_lifetime_set_ratio = 100 - player_one_lifetime_set_ratio;\r\n                    let player_two_lifetime_game_ratio = 100 - player_one_lifetime_game_ratio;\r\n\r\n                    // Sanitize the image names.\r\n                    player_one_main = player_one_main.replace(' ', '-').toLowerCase();\r\n                    player_one_secondary = player_one_secondary.replace(' ', '-').toLowerCase();\r\n                    player_two_main = player_two_main.replace(' ', '-').toLowerCase();\r\n                    player_two_secondary = player_two_secondary.replace(' ', '-').toLowerCase();\r\n\r\n                    // Storing relevant elements to assign data to.\r\n                    const player_one_character_element = document.getElementById('player_one_character');\r\n                    const player_two_character_element = document.getElementById('player_two_character');\r\n\r\n                    const player_one_name_element = document.getElementById('player_one_name');\r\n                    const player_two_name_element = document.getElementById('player_two_name');\r\n\r\n                    const player_one_tag_element = document.getElementById('player_one_tag');\r\n                    const player_two_tag_element = document.getElementById('player_two_tag');\r\n\r\n                    const player_one_pr_element = document.getElementById('player_one_pr');\r\n                    const player_two_pr_element = document.getElementById('player_two_pr');\r\n\r\n                    const player_one_seasonal_points_element = document.getElementById('player_one_seasonal_points');\r\n                    const player_two_seasonal_points_element = document.getElementById('player_two_seasonal_points');\r\n\r\n                    const head_to_head_title = document.getElementById('head_to_head_title');\r\n                    const stats_title = document.getElementById('stats_title');\r\n\r\n                    const win_percent_title = document.querySelectorAll('.win_percent_title');\r\n                    const pr_title = document.querySelectorAll('.pr_title');\r\n\r\n                    const set_title_elements = document.querySelectorAll('.sets');\r\n                    const game_title_elements = document.querySelectorAll('.games');\r\n                    const points_title_elements = document.querySelectorAll('.points');\r\n\r\n                    const bracket_social_element = document.getElementById('bracket');\r\n\r\n                    const lifetime_title = document.getElementById('lifetime_title');\r\n                    const player_one_lifetime_sets_element = document.getElementById('player_one_lifetime_sets');\r\n                    const player_two_lifetime_sets_element = document.getElementById('player_two_lifetime_sets');\r\n\r\n                    const player_one_lifetime_games_element = document.getElementById('player_one_lifetime_games');\r\n                    const player_two_lifetime_games_element = document.getElementById('player_two_lifetime_games');\r\n                    \r\n                    const seasonal_title = document.getElementById('seasonal_title');\r\n                    const player_one_seasonal_sets_ratio_element = document.getElementById('player_one_seasonal_sets_ratio');\r\n                    const player_two_seasonal_sets_ratio_element = document.getElementById('player_two_seasonal_sets_ratio');\r\n\r\n                    const player_one_seasonal_sets_count_element = document.getElementById('player_one_seasonal_sets_count');\r\n                    const player_two_seasonal_sets_count_element = document.getElementById('player_two_seasonal_sets_count');\r\n\r\n                    const player_one_seasonal_games_element = document.getElementById('player_one_seasonal_games');\r\n                    const player_two_seasonal_games_element = document.getElementById('player_two_seasonal_games');\r\n\r\n                    const main_logo = document.getElementById('main_logo');\r\n\r\n                    // Adding player stats to elements for view.\r\n                    data_output.style.display = 'flex';\r\n                    main_logo.style.display = 'block';\r\n                    bracket_social_element.style.display = 'block';\r\n\r\n                    player_one_character_element.src = player_one_main;\r\n                    player_two_character_element.src = player_two_main;\r\n\r\n                    if (player_one_tag == '') {\r\n                        player_one_tag = default_tag;\r\n                    }\r\n\r\n                    if (player_two_tag == '') {\r\n                        player_two_tag = default_tag;\r\n                    }\r\n\r\n                    player_one_tag_element.innerHTML = generateTagBanner(player_one_tag);\r\n                    player_two_tag_element.innerHTML = generateTagBanner(player_two_tag);\r\n\r\n                    player_one_name_element.innerText = player_one_name;\r\n                    player_two_name_element.innerText = player_two_name;\r\n\r\n                    player_one_pr_element.innerText = `#${player_one_seasonal_rank}`;\r\n                    player_two_pr_element.innerText = `#${player_two_seasonal_rank}`;\r\n                    \r\n                    player_one_seasonal_points_element.innerText = `${player_one_seasonal_points}`;\r\n                    player_two_seasonal_points_element.innerText = `${player_two_seasonal_points}`;\r\n\r\n                    head_to_head_title.innerText = 'Head to Head';\r\n                    stats_title.innerText = 'Stats';\r\n                    \r\n                    win_percent_title.forEach((element) => {\r\n                        element.innerText = 'Win %';\r\n                    });\r\n\r\n                    pr_title.forEach((element) => {\r\n                        element.innerText = 'PR';\r\n                    });\r\n\r\n                    set_title_elements.forEach((element) => {\r\n                        element.innerText = 'Sets';\r\n                    });\r\n\r\n                    game_title_elements.forEach((element) => {\r\n                        element.innerText = 'Games';\r\n                    });\r\n\r\n                    points_title_elements.forEach((element) => {\r\n                        element.innerText = 'Points';\r\n                    });\r\n\r\n                    bracket_social_element.innerText = `${bracket_social}`;\r\n\r\n                    seasonal_title.innerText = 'Seasonal';\r\n                    player_one_seasonal_sets_ratio_element.innerText = `${player_one_seasonal_set_ratio}%`;\r\n                    player_two_seasonal_sets_ratio_element.innerText = `${player_two_seasonal_set_ratio}%`;\r\n\r\n                    player_one_seasonal_sets_count_element.innerText = `${player_one_seasonal_set_count}`;\r\n                    player_two_seasonal_sets_count_element.innerText = `${player_two_seasonal_set_count}`;\r\n\r\n                    player_one_seasonal_games_element.innerText = `${player_one_seasonal_game_count}`;\r\n                    player_two_seasonal_games_element.innerText = `${player_two_seasonal_game_count}`;\r\n\r\n                    lifetime_title.innerText = 'Lifetime';\r\n                    player_one_lifetime_sets_element.innerText = `${player_one_lifetime_set_count}`;\r\n                    player_two_lifetime_sets_element.innerText = `${player_two_lifetime_set_count}`;\r\n                    \r\n                    player_one_lifetime_games_element.innerText = `${player_one_lifetime_game_count}`;\r\n                    player_two_lifetime_games_element.innerText = `${player_two_lifetime_game_count}`;\r\n\r\n                } else {\r\n\r\n                    error_messages_element.innerHTML = `<p>These players have not played a set this season!</p>`;\r\n                    console.log('These players have not played a set this season!');\r\n\r\n                }\r\n\r\n            };\r\n\r\n        });\r\n\r\n        writeLog('Ready! Awaiting player selection.');\r\n\r\n        console.group('Head 2 Head');\r\n        console.log(head_2_head);\r\n        console.groupEnd();\r\n\r\n        // Debug mode to automatically select two players and trigger the click event.\r\n        if (debug_mode) {\r\n            player_one_select.options.selectedIndex = 1;\r\n            player_two_select.options.selectedIndex = 2;\r\n\r\n            let click_event = new Event('click');\r\n            player_selection_submit.dispatchEvent(click_event);\r\n\r\n            const character_images = [\r\n                'banjo-and-kazooie-00-full.png',\r\n                'bayonetta-00-full.png',\r\n                'bowser-00-full.png',\r\n                'bowser-jr-00-full.png',\r\n                'byleth-00-full.png',\r\n                'captain-falcon-00-full.png',\r\n                'chrom-00-full.png',\r\n                'cloud-00-full.png',\r\n                'corrin-00-full.png',\r\n                'daisy-00-full.png',\r\n                'dark-pit-00-full.png',\r\n                'dark-samus-00-full.png',\r\n                'diddy-kong-00-full.png',\r\n                'donkey-kong-00-full.png',\r\n                'dr-mario-00-full.png',\r\n                'duck-hunt-00-full.png',\r\n                'falco-00-full.png',\r\n                'fox-00-full.png',\r\n                'ganondorf-00-full.png',\r\n                'greninja-00-full.png',\r\n                'hero-00-full.png',\r\n                'ice-climbers-00-full.png',\r\n                'ike-00-full.png',\r\n                'incineroar-00-full.png',\r\n                'inkling-00-full.png',\r\n                'isabelle-00-full.png',\r\n                'jigglypuff-00-full.png',\r\n                'joker-00-full.png',\r\n                'kazuya-00-full.png',\r\n                'ken-00-full.png',\r\n                'king-dedede-00-full.png',\r\n                'king-k-rool-00-full.png',\r\n                'kirby-00-full.png',\r\n                'link-00-full.png',\r\n                'little-mac-00-full.png',\r\n                'lucario-00-full.png',\r\n                'lucas-00-full.png',\r\n                'lucina-00-full.png',\r\n                'luigi-00-full.png',\r\n                'mario-00-full.png',\r\n                'marth-00-full.png',\r\n                'mega-man-00-full.png',\r\n                'meta-knight-00-full.png',\r\n                'mewtwo-00-full.png',\r\n                'mii-brawler-00-full.png',\r\n                'mii-gunner-00-full.png',\r\n                'mii-swordfighter-00-full.png',\r\n                'min-min-00-full.png',\r\n                'mr-game-and-watch-00-full.png',\r\n                'ness-00-full.png',\r\n                'olimar-00-full.png',\r\n                'pac-man-00-full.png',\r\n                'palutena-00-full.png',\r\n                'peach-00-full.png',\r\n                'pichu-00-full.png',\r\n                'pikachu-00-full.png',\r\n                'piranha-plant-00-full.png',\r\n                'pit-00-full.png',\r\n                'pokemon-trainer-00-full.png',\r\n                'pyra-and-mythra-00-full.png',\r\n                'richter-00-full.png',\r\n                'ridley-00-full.png',\r\n                'rob-00-full.png',\r\n                'robin-00-full.png',\r\n                'rosalina-and-luma-00-full.png',\r\n                'roy-00-full.png',\r\n                'ryu-00-full.png',\r\n                'samus-00-full.png',\r\n                'sephiroth-00-full.png',\r\n                'sheik-00-full.png',\r\n                'shulk-00-full.png',\r\n                'simon-00-full.png',\r\n                'snake-00-full.png',\r\n                'sonic-00-full.png',\r\n                'sora-00-full.png',\r\n                'steve-00-full.png',\r\n                'terry-00-full.png',\r\n                'toon-link-00-full.png',\r\n                'villager-00-full.png',\r\n                'wario-00-full.png',\r\n                'wii-fit-trainer-00-full.png',\r\n                'wolf-00-full.png',\r\n                'yoshi-00-full.png',\r\n                'young-link-00-full.png',\r\n                'zelda-00-full.png',\r\n                'zero-suit-samus-00-full.png'\r\n            ];\r\n\r\n            let p1_character = document.querySelector('.p1_character');\r\n            let p2_character = document.querySelector('.p2_character');\r\n            let character_counter = 0;\r\n\r\n            document.addEventListener('keydown', (e) => {\r\n\r\n                if (e.code == 'Space') {\r\n\r\n                    p1_character.src = character_prefix + character_images[character_counter];\r\n                    p2_character.src = character_prefix + character_images[character_counter];\r\n                    \r\n                    if (character_counter == character_images.length -1) {\r\n                        character_counter = 0;\r\n                    } else {\r\n                        character_counter++;\r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n    // Pulling data failed.\r\n    } catch (error) {\r\n\r\n        console.error(error.message);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction cleanPlayerName(player_name) {\r\n\r\n    if (player_name.includes(' | ')) {\r\n\r\n        player_name = player_name.split(' | ').pop();   \r\n\r\n    }\r\n\r\n    player_name == undefined ? player_name = false : null ;\r\n\r\n    return player_name;\r\n\r\n}\r\n\r\n\r\nfunction writeLog(message) {\r\n\r\n    // progress_log.innerHTML = message;\r\n\r\n    console.log(message);\r\n\r\n};\r\n\r\n\r\nfunction deleteExtraFields(json, key) {\r\n\r\n    delete json[key]['field1'];\r\n    delete json[key]['field2'];\r\n    delete json[key]['field21'];\r\n    delete json[key]['field22'];\r\n\r\n}\r\n\r\n\r\nfunction bothPlayersSelected(player_one, player_two, error_messages_element) {\r\n\r\n    if (player_one.value != player_one_default && player_two.value !== player_two_default) {\r\n        error_messages_element.innerHTML = '';\r\n        error_messages_element.style.display = 'none';\r\n        return true;\r\n    } else {\r\n        error_messages_element.innerHTML = `<p>Please select two players!</p>`;\r\n        error_messages_element.style.display = 'flex';\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction generateTagBanner(tag) {\r\n\r\n    let tag_generation = 100;\r\n    let tag_output = '';\r\n    let highlighted_tag = `<span class=\"tag_highlight\">${tag}</span>`;\r\n\r\n    for (let i = 0; i < tag_generation; i++) { \r\n        if (i % 2 == 0) {\r\n            tag_output += (highlighted_tag + '&nbsp;' + tag + '&nbsp;').repeat(6) + tag + '&nbsp;';\r\n        } else {\r\n            tag_output += (tag + '&nbsp;' + highlighted_tag + '&nbsp;').repeat(6) + tag + '&nbsp;';\r\n        }\r\n    }\r\n    \r\n    return tag_output;\r\n\r\n}\r\n\r\n\r\nget_data();\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;