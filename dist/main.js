(()=>{const e="http://127.0.0.1:8082/src/data/",t=e+"all_time_sets.json",n=e+"all_time_games.json",s=e+"season_to_date_sets.json",o=e+"season_to_date_games.json",i=e+"all_time_rankings.json",a=document.querySelectorAll("select"),l=document.getElementById("player_one"),r=document.getElementById("player_two"),c=document.getElementById("data"),d="Player One",f="Player Two";function m(e){c.innerHTML=e,console.log(e)}!async function(){try{m("Attempting to pull data...");const e=await fetch(t),p=await fetch(n),u=await fetch(s),S=await fetch(o),h=await fetch(i);if(!e.ok)throw new Error(`She's broke bahd! Response status: ${e.status}`);if(!p.ok)throw new Error(`She's broke bahd! Response status: ${p.status}`);if(!u.ok)throw new Error(`She's broke bahd! Response status: ${u.status}`);if(!S.ok)throw new Error(`She's broke bahd! Response status: ${S.status}`);if(!h.ok)throw new Error(`She's broke bahd! Response status: ${h.status}`);m("Responses OK, pulling data...");const $=await e.json(),L=await p.json(),w=await u.json(),b=await S.json(),y=await h.json();m("Storing data for use...");const R=$,g=L,I=w,_=b,k=y;l.innerHTML+=`<option>${d}</option>`,r.innerHTML+=`<option>${f}</option>`,m("Creating list of players...");for(const e in y){let t=y[e].Player,n=y[e].Rank;y[e].Player.includes(" | ")&&(t=y[e].Player.split(" | "),t=t[1]),l.innerHTML+=`<option value="${n}">${t}</option>`,r.innerHTML+=`<option value="${n}">${t}</option>`}m("Normalizing data...");for(const e in R)R[`${R[e].field2}`]=R[e],delete R[e];for(const e in g)g[`${g[e].field2}`]=g[e],delete g[e];for(const e in I)I[`${I[e].field2}`]=I[e],delete I[e];for(const e in _)_[`${_[e].field2}`]=_[e],delete _[e];for(const e in k){k[e].Sets={Lifetime:{Indicies:{},Results:{}},Seasonal:{Indicies:{},Results:{}}},k[e].Games={Lifetime:{Indicies:{},Results:{}},Seasonal:{Indicies:{},Results:{}}};let t=k[e].Player;for(const n in R)R[n].field2==t&&(k[e].Sets.Lifetime.Results=R[n],k[e].Sets.Lifetime.Indicies=R[""]);for(const n in g)g[n].field2==t&&(k[e].Games.Lifetime.Results=g[n],k[e].Sets.Lifetime.Indicies=g[""]);for(const n in I)I[n].field2==t&&(k[e].Sets.Seasonal.Results=I[n],k[e].Sets.Lifetime.Indicies=I[""]);for(const n in _)_[n].field2==t&&(k[e].Games.Seasonal.Results=_[n],k[e].Sets.Lifetime.Indicies=_[""])}m("Ready!"),a.forEach((e=>{e.addEventListener("change",(function(){if(t=r,(e=l).options[e.selectedIndex].value!=d&&t.options[t.selectedIndex].value!=f){let e,t,n,s,o,i,a=l.options[l.selectedIndex].innerText,d=l.options[l.selectedIndex].value,f=r.options[r.selectedIndex].innerText,m=r.options[r.selectedIndex].value;for(const t in k)if(k[t].Player==a){console.log("the player matches..."),console.log(k[t].Sets.Lifetime);for(const e in k[t].Sets.Lifetime)console.log(k[t].Sets.Lifetime[e]);e=k[t].Characters,n=k[t].Sets.Lifetime,s=k[t].Games.Lifetime,o=k[t].Sets.Seasonal,i=k[t].Games.Seasonal}c.innerHTML=`\n                    <article class="player-stats">\n                        <p>\n                            P1: ${a} (${e})\n                            <br>\n                            PR #${d}\n                            <br>\n                            <br>\n                            Lifetime Stats\n                            <br>\n                            Lifetime Sets: ${n}\n                            <br>\n                            Lifetime Games: ${s}\n                            <br>\n                            <br>\n                            Seasonal Stats\n                            <br>\n                            Seasonal Sets: ${o}\n                            <br>\n                            Seasonal Games: ${i}\n                        </p>\n                        <p>VS</p>\n                        <p>\n                            P1: ${f} (${t})\n                            <br>\n                            PR #${m}\n                        </p>\n                    </article>\n                    `}var e,t}))}))}catch(e){console.error(e.message)}}()})();