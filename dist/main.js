(()=>{const e="http://127.0.0.1:8082/src/data/",a=e+"lifetime_rankings.json",n=e+"lifetime_sets.json",t=e+"lifetime_games.json",s=e+"seasonal_rankings.json",o=e+"seasonal_sets.json",i=e+"seasonal_games.json",r=document.getElementById("player-selection__submit"),l=document.getElementById("player_one"),d=document.getElementById("player_two"),c=document.getElementById("data"),p=document.getElementById("progress-log"),f="Player One",g="Player Two";function m(e){return e.includes(" | ")&&(e=e.split(" | ").pop()),null==e&&(e=!1),e}function u(e){p.innerHTML=e}function S(e,a){delete e[a].field1,delete e[a].field2,delete e[a].field21,delete e[a].field22}!async function(){try{u("Attempting to pull data...");const e=await fetch(a),h=await fetch(n),w=await fetch(t),y=await fetch(s),$=await fetch(o),k=await fetch(i);if(!e.ok)throw new Error(`She's broke bahd! Response status: ${e.status}`);if(!h.ok)throw new Error(`She's broke bahd! Response status: ${h.status}`);if(!w.ok)throw new Error(`She's broke bahd! Response status: ${w.status}`);if(!y.ok)throw new Error(`She's broke bahd! Response status: ${y.status}`);if(!$.ok)throw new Error(`She's broke bahd! Response status: ${$.status}`);if(!k.ok)throw new Error(`She's broke bahd! Response status: ${k.status}`);u("Responses OK, pulling data...");const b=await e.json(),L=await h.json(),R=await w.json(),P=await y.json(),_=await $.json(),H=await k.json();u("Creating Head 2 Head JSON: Building Player structure...");let D={};for(const e in b){let a=b[e].Player,n="";if(a.includes(" | ")){let e=a.split(" | ");a=e[1],n=e[0]}D[a]={Characters:b[e].Characters,Country:b[e].Country,GameData:{Lifetime:{},Seasonal:{}},PlayerName:a,PowerRanking:{Lifetime:{Points:b[e].Points,Rank:b[e].Rank},Seasonal:{Points:"",Rank:""}},Tag:n,SetData:{Lifetime:{},Seasonal:{}}}}u("Creating Head 2 Head JSON: Seasonal Rankings...");for(const e in P){let a=P[e].Player,n=P[e].Points,t=P[e].Rank;a=m(a),D[a].PowerRanking.Seasonal.Points=n,D[a].PowerRanking.Seasonal.Rank=t}u("Data cleaning: Deleteing header arrays...");const I=L[0],C=R[0],M=_[0],E=H[0];delete L[0],delete R[0],delete _[0],delete H[0],u("Data cleaning: Lifetime Sets...");for(const e in L){let a=L[e].field2;null!=a&&(a=m(a),L[a]=L[e],delete L[e])}u("Data cleaning: Lifetime Games...");for(const e in R){let a=R[e].field2;null!=a&&(a=m(a),R[a]=R[e],delete R[e])}u("Data cleaning: Seasonal Sets...");for(const e in _){let a=_[e].field2;null!=a&&(a=m(a),_[a]=_[e],delete _[e])}u("Data cleaning: Seasonal Games...");for(const e in H){let a=H[e].field2;null!=a&&(a=m(a),H[a]=H[e],delete H[e])}u("Data cleaning: Key replacements for Lifetime Sets...");for(const e in L)for(const a in L[e]){let n=L[e][a],t=I[a];t=m(t),L[e][t]=n,delete L[e][a]}u("Data cleaning: Key replacements for Lifetime Games...");for(const e in R)for(const a in R[e]){let n=R[e][a],t=C[a];t=m(t),R[e][t]=n,delete R[e][a]}u("Data cleaning: Key replacements for Seasonal Sets...");for(const e in _)for(const a in _[e]){let n=_[e][a],t=M[a];t=m(t),_[e][t]=n,delete _[e][a]}u("Data cleaning: Key replacements for Seasonal Games...");for(const e in H)for(const a in H[e]){let n=H[e][a],t=E[a];t=m(t),H[e][t]=n,delete H[e][a]}u("Creating Head 2 Head JSON: Adding Lifetime Sets data...");for(const e in L)0==e?delete L[e]:(S(L,e),D[e].SetData.Lifetime=L[e]);u("Creating Head 2 Head JSON: Adding Seasonal Set data...");for(const e in _)0==e?delete _[e]:(S(_,e),D[e].SetData.Seasonal=_[e]);u("Creating Head 2 Head JSON: Adding Lifetime Game data...");for(const e in R)0==e?delete R[e]:(S(R,e),D[e].GameData.Lifetime=R[e]);u("Creating Head 2 Head JSON: Adding Seasonal Game data...");for(const e in H)0==e?delete H[e]:(S(H,e),D[e].GameData.Seasonal=H[e]);u("Head 2 Head JSON compiled, creating list of Players..."),l.innerHTML+=`<option>${f}</option>`,d.innerHTML+=`<option>${g}</option>`;for(const e in D){let a=D[e].PlayerName,n=D[e].Rank;l.innerHTML+=`<option value="${n}">${a}</option>`,d.innerHTML+=`<option value="${n}">${a}</option>`}u("Finishing up..."),r.addEventListener("click",(function(){if(e=d,l.value!=f&&e.value!==g){let e=l.options[l.selectedIndex].innerText,a=d.options[d.selectedIndex].innerText,n=D[e].Tag,t=D[a].Tag,s=D[e].PowerRanking.Lifetime.Rank,o=D[e].PowerRanking.Lifetime.Points,i=D[e].PowerRanking.Seasonal.Rank,r=D[e].PowerRanking.Seasonal.Points,p=D[e].Characters.split(" - "),f=p[0]+"-00-full.png",g=p[1]+"-00-full.png",m=D[e].SetData.Lifetime[a],u=D[e].SetData.Seasonal[a],S=D[e].GameData.Lifetime[a],h=D[e].GameData.Seasonal[a],w=m.split(" -- "),y=S.split(" -- "),$=u.split(" -- "),k=h.split(" -- "),b=parseInt(w[0])/(parseInt(w[0])+parseInt(w[1]))*100,L=parseInt(y[0])/(parseInt(y[0])+parseInt(y[1]))*100,R=parseInt($[0])/(parseInt($[0])+parseInt($[1]))*100,P=parseInt(k[0])/(parseInt(k[0])+parseInt(k[1]))*100,_=D[a].PowerRanking.Lifetime.Rank,H=D[a].PowerRanking.Lifetime.Points,I=D[a].PowerRanking.Seasonal.Rank,C=D[a].PowerRanking.Seasonal.Points,M=D[a].Characters.split(" - "),E=M[0]+"-00-full.png",G=M[1]+"-00-full.png";f=f.replace(" ","-").toLocaleLowerCase(),g=g.replace(" ","-").toLocaleLowerCase(),E=E.replace(" ","-").toLowerCase(),G=G.replace(" ","-").toLowerCase(),c.innerHTML=`\n                <article class="player-stats">\n                    <p>\n                        <img class="player-stats__player_main" src="./public/images/fighters/${f}">\n                        <span class="player-stats__player_name"><span class="player-stats__player-tag">${n}</span>${e}</span>\n                        <br>\n                        Lifetime PR - #${s} (${o})\n                        <br>\n                        Seasonal PR - #${i} (${r})\n                    </p>\n                    <p>\n                        Lifetime Sets:\n                        <br>\n                        ${m}\n                        <br>\n                        ${Math.round(b)}% | ${Math.round(100-b)}%\n                        <br>\n                        <br>\n                        Lifetime Games:\n                        <br>\n                        ${S}\n                        <br>\n                        ${Math.round(L)}% | ${Math.round(100-L)}%\n                        <br>\n                        <br>\n                        <br>\n                        Seasonal Sets:\n                        <br>\n                        ${u}\n                        <br>\n                        ${Math.round(R)}% | ${Math.round(100-R)}%\n                        <br>\n                        <br>\n                        Seasonal Games:\n                        <br>\n                        ${h}\n                        <br>\n                        ${Math.round(P)}% | ${Math.round(100-P)}%\n                    </p>\n                    <p>\n                        <img class="player-stats__player_main" src="./public/images/fighters/${E}">\n                        <span class="player-stats__player_name"><span class="player-stats__player-tag">${t}</span>${a}</span>\n                        <br>\n                        Lifetime PR - #${_} (${H})\n                        <br>\n                        Seasonal PR - #${I} (${C})\n                    </p>\n                </article>\n                `}var e})),u("Ready! Awaiting player selection."),p.style.display="none",console.group("Head 2 Head"),console.log(D),console.groupEnd()}catch(e){console.error(e.message)}}()})();