(()=>{const e="http://127.0.0.1:8082/src/data/",n=e+"lifetime_rankings.json",a=e+"lifetime_sets.json",t=e+"lifetime_games.json",s=e+"seasonal_rankings.json",o=e+"seasonal_sets.json",i=e+"seasonal_games.json",r=document.querySelectorAll("select"),l=document.getElementById("player_one"),d=document.getElementById("player_two"),c=document.getElementById("data"),p="Player One",f="Player Two";function m(e){return e.includes(" | ")&&(e=e.split(" | ").pop()),null==e&&(e=!1),e}function g(e){c.innerHTML=e}function u(e,n){delete e[n].field1,delete e[n].field2,delete e[n].field21,delete e[n].field22}!async function(){try{g("Attempting to pull data...");const e=await fetch(n),S=await fetch(a),h=await fetch(t),$=await fetch(s),w=await fetch(o),k=await fetch(i);if(!e.ok)throw new Error(`She's broke bahd! Response status: ${e.status}`);if(!S.ok)throw new Error(`She's broke bahd! Response status: ${S.status}`);if(!h.ok)throw new Error(`She's broke bahd! Response status: ${h.status}`);if(!$.ok)throw new Error(`She's broke bahd! Response status: ${$.status}`);if(!w.ok)throw new Error(`She's broke bahd! Response status: ${w.status}`);if(!k.ok)throw new Error(`She's broke bahd! Response status: ${k.status}`);g("Responses OK, pulling data...");const y=await e.json(),R=await S.json(),b=await h.json(),P=await $.json(),L=await w.json(),H=await k.json();g("Creating Head 2 Head JSON: Building Player structure...");let D={};for(const e in y){let n=y[e].Player,a="";if(n.includes(" | ")){let e=n.split(" | ");n=e[1],a=e[0]}D[n]={Characters:y[e].Characters,Country:y[e].Country,GameData:{Lifetime:{},Seasonal:{}},PlayerName:n,PowerRanking:{Lifetime:{Points:y[e].Points,Rank:y[e].Rank},Seasonal:{Points:"",Rank:""}},Tag:a,SetData:{Lifetime:{},Seasonal:{}}}}g("Creating Head 2 Head JSON: Seasonal Rankings...");for(const e in P){let n=P[e].Player,a=P[e].Points,t=P[e].Rank;n=m(n),D[n].PowerRanking.Seasonal.Points=a,D[n].PowerRanking.Seasonal.Rank=t}g("Data cleaning: Deleteing header arrays...");const I=R[0],_=b[0],M=L[0],G=H[0];delete R[0],delete b[0],delete L[0],delete H[0],g("Data cleaning: Lifetime Sets...");for(const e in R){let n=R[e].field2;null!=n&&(n=m(n),R[n]=R[e],delete R[e])}g("Data cleaning: Lifetime Games...");for(const e in b){let n=b[e].field2;null!=n&&(n=m(n),b[n]=b[e],delete b[e])}g("Data cleaning: Seasonal Sets...");for(const e in L){let n=L[e].field2;null!=n&&(n=m(n),L[n]=L[e],delete L[e])}g("Data cleaning: Seasonal Games...");for(const e in H){let n=H[e].field2;null!=n&&(n=m(n),H[n]=H[e],delete H[e])}g("Data cleaning: Key replacements for Lifetime Sets...");for(const e in R)for(const n in R[e]){let a=R[e][n],t=I[n];t=m(t),R[e][t]=a,delete R[e][n]}g("Data cleaning: Key replacements for Lifetime Games...");for(const e in b)for(const n in b[e]){let a=b[e][n],t=_[n];t=m(t),b[e][t]=a,delete b[e][n]}g("Data cleaning: Key replacements for Seasonal Sets...");for(const e in L)for(const n in L[e]){let a=L[e][n],t=M[n];t=m(t),L[e][t]=a,delete L[e][n]}g("Data cleaning: Key replacements for Seasonal Games...");for(const e in H)for(const n in H[e]){let a=H[e][n],t=G[n];t=m(t),H[e][t]=a,delete H[e][n]}g("Creating Head 2 Head JSON: Adding Lifetime Sets data...");for(const e in R)0==e?delete R[e]:(u(R,e),D[e].SetData.Lifetime=R[e]);g("Creating Head 2 Head JSON: Adding Seasonal Set data...");for(const e in L)0==e?delete L[e]:(u(L,e),D[e].SetData.Seasonal=L[e]);g("Creating Head 2 Head JSON: Adding Lifetime Game data...");for(const e in b)0==e?delete b[e]:(u(b,e),D[e].GameData.Lifetime=b[e]);g("Creating Head 2 Head JSON: Adding Seasonal Game data...");for(const e in H)0==e?delete H[e]:(u(H,e),D[e].GameData.Seasonal=H[e]);g("Head 2 Head JSON compiled, creating list of Players..."),l.innerHTML+=`<option>${p}</option>`,d.innerHTML+=`<option>${f}</option>`;for(const e in D){let n=D[e].PlayerName,a=D[e].Rank;l.innerHTML+=`<option value="${a}">${n}</option>`,d.innerHTML+=`<option value="${a}">${n}</option>`}g("Finishing up..."),r.forEach((e=>{e.addEventListener("change",(function(){if(n=d,(e=l).options[e.selectedIndex].value!=p&&n.options[n.selectedIndex].value!=f){let e=l.options[l.selectedIndex].innerText,n=d.options[d.selectedIndex].innerText,a=D[e].Tag,t=D[n].Tag,s=D[e].PowerRanking.Lifetime.Rank,o=D[e].PowerRanking.Lifetime.Points,i=D[e].PowerRanking.Seasonal.Rank,r=D[e].PowerRanking.Seasonal.Points,p=D[e].Characters.split(" - "),f=p[0],m=p[1],g=D[e].SetData.Lifetime[n],u=D[e].SetData.Seasonal[n],S=D[e].GameData.Lifetime[n],h=D[e].GameData.Seasonal[n],$=g.split(" -- "),w=S.split(" -- "),k=u.split(" -- "),y=h.split(" -- "),R=parseInt($[0])/(parseInt($[0])+parseInt($[1]))*100,b=parseInt(w[0])/(parseInt(w[0])+parseInt(w[1]))*100,P=parseInt(k[0])/(parseInt(k[0])+parseInt(k[1]))*100,L=parseInt(y[0])/(parseInt(y[0])+parseInt(y[1]))*100,H=D[n].PowerRanking.Lifetime.Rank,I=D[n].PowerRanking.Lifetime.Points,_=D[n].PowerRanking.Seasonal.Rank,M=D[n].PowerRanking.Seasonal.Points,G=D[n].Characters.split(" - "),j=G[0],C=G[1];c.innerHTML=`\n                    <article class="player-stats">\n                        <p>\n                            <span class="player-stats__player_name"><span class="player-stats__player-tag">${a}</span>${e}</span>\n                            <br>\n                            ${f} / ${m}\n                            <br>\n                            Lifetime PR - #${s} (${o})\n                            <br>\n                            Seasonal PR - #${i} (${r})\n                        </p>\n                        <p>\n                            Lifetime Sets:\n                            <br>\n                            ${g}\n                            <br>\n                            ${Math.round(R)}% | ${Math.round(100-R)}%\n                            <br>\n                            <br>\n                            Lifetime Games:\n                            <br>\n                            ${S}\n                            <br>\n                            ${Math.round(b)}% | ${Math.round(100-b)}%\n                            <br>\n                            <br>\n                            <br>\n                            Seasonal Sets:\n                            <br>\n                            ${u}\n                            <br>\n                            ${Math.round(P)}% | ${Math.round(100-P)}%\n                            <br>\n                            <br>\n                            Seasonal Games:\n                            <br>\n                            ${h}\n                            <br>\n                            ${Math.round(L)}% | ${Math.round(100-L)}%\n                        </p>\n                        <p>\n                            <span class="player-stats__player_name"><span class="player-stats__player-tag">${t}</span>${n}</span>\n                            <br>\n                            ${j} / ${C}\n                            <br>\n                            Lifetime PR - #${H} (${I})\n                            <br>\n                            Seasonal PR - #${_} (${M})\n                        </p>\n                    </article>\n                    `}var e,n}))})),g("Ready! Awaiting player selection."),console.group("Head 2 Head"),console.log(D),console.groupEnd()}catch(e){console.error(e.message)}}()})();